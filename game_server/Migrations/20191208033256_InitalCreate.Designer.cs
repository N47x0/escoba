// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using game_server.Context;

namespace game_server.Migrations
{
    [DbContext(typeof(GameSessionModelDbContext))]
    [Migration("20191208033256_InitalCreate")]
    partial class InitalCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("game_server.Database.Models.GameInfo", b =>
                {
                    b.Property<Guid>("GameInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("GameInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GameName")
                        .HasColumnName("GameName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GameInfoId");

                    b.ToTable("GameInfo","Games");

                    b.HasData(
                        new
                        {
                            GameInfoId = new Guid("95aff857-682e-494a-97e9-21996b5a753d"),
                            GameName = "Escoba"
                        },
                        new
                        {
                            GameInfoId = new Guid("7bdbcf13-dce5-4424-92cd-f7be50f3259a"),
                            GameName = "Pusoy Dos"
                        });
                });

            modelBuilder.Entity("game_server.Database.Models.GameSession", b =>
                {
                    b.Property<Guid>("GameSessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("GameSessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GameInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GameSessionState")
                        .HasColumnName("GameSessionState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GameStates")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("GameStatisticId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GameSessionId");

                    b.HasIndex("GameInfoId");

                    b.HasIndex("GameStatisticId")
                        .IsUnique();

                    b.ToTable("GameSessions","Games");
                });

            modelBuilder.Entity("game_server.Database.Models.GameStatistic", b =>
                {
                    b.Property<Guid>("GameStatisticId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("GameStatisticId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("AiWin")
                        .HasColumnName("AiWin")
                        .HasColumnType("bit");

                    b.Property<bool?>("Draw")
                        .HasColumnName("Draw")
                        .HasColumnType("bit");

                    b.Property<string>("FinalScore")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("GameComplete")
                        .HasColumnName("GameComplete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("GameEnd")
                        .HasColumnName("GameEnd")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("GameInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GameSessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("GameStart")
                        .HasColumnName("GameStart")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("HumanWin")
                        .HasColumnName("HumanWin")
                        .HasColumnType("bit");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserStatisticId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GameStatisticId");

                    b.HasIndex("GameInfoId");

                    b.HasIndex("GameSessionId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.HasIndex("UserStatisticId");

                    b.ToTable("GameStatistics","Games");
                });

            modelBuilder.Entity("game_server.Database.Models.Rule", b =>
                {
                    b.Property<Guid>("RuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RuleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GameInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RuleName")
                        .HasColumnName("RuleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RuleText")
                        .HasColumnName("RuleText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RuleId");

                    b.HasIndex("GameInfoId");

                    b.HasIndex("UserId");

                    b.ToTable("Rules","Games");
                });

            modelBuilder.Entity("game_server.Database.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmailAddress")
                        .HasColumnName("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnName("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnName("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users","Games");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("29d76e39-e05e-4b84-a13d-7d98924ab18c"),
                            EmailAddress = "jdoe@acme.com",
                            FirstName = "John",
                            LastName = "Doe"
                        },
                        new
                        {
                            UserId = new Guid("7611b043-b630-49a4-8fcc-c6e783d72719"),
                            EmailAddress = "ai@escoba.com",
                            FirstName = "Hal",
                            LastName = "9000"
                        });
                });

            modelBuilder.Entity("game_server.Database.Models.UserGameSession", b =>
                {
                    b.Property<Guid>("UserGameSessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserGameSessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GameInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GameSessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GameStatisticId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserGameSessionId");

                    b.HasIndex("GameInfoId");

                    b.HasIndex("GameSessionId");

                    b.HasIndex("GameStatisticId");

                    b.HasIndex("UserId");

                    b.ToTable("UserGameSessions","Games");
                });

            modelBuilder.Entity("game_server.Database.Models.UserStatistic", b =>
                {
                    b.Property<Guid>("UserStatisticId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserStatisticId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Draws")
                        .HasColumnName("Draws")
                        .HasColumnType("int");

                    b.Property<Guid>("GameInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Losses")
                        .HasColumnName("Losses")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfPlays")
                        .HasColumnName("NumberOfPlays")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Wins")
                        .HasColumnName("Wins")
                        .HasColumnType("int");

                    b.HasKey("UserStatisticId");

                    b.HasIndex("GameInfoId");

                    b.HasIndex("UserId");

                    b.ToTable("UserStatistics","Games");

                    b.HasData(
                        new
                        {
                            UserStatisticId = new Guid("da8d378f-8896-4c21-94b6-6d438ace6bb8"),
                            Draws = 0,
                            GameInfoId = new Guid("95aff857-682e-494a-97e9-21996b5a753d"),
                            Losses = 0,
                            NumberOfPlays = 0,
                            UserId = new Guid("29d76e39-e05e-4b84-a13d-7d98924ab18c"),
                            Wins = 0
                        },
                        new
                        {
                            UserStatisticId = new Guid("accd8c26-496e-4f96-97e2-4fde22d1dea9"),
                            Draws = 0,
                            GameInfoId = new Guid("95aff857-682e-494a-97e9-21996b5a753d"),
                            Losses = 0,
                            NumberOfPlays = 0,
                            UserId = new Guid("7611b043-b630-49a4-8fcc-c6e783d72719"),
                            Wins = 0
                        });
                });

            modelBuilder.Entity("game_server.Database.Models.GameSession", b =>
                {
                    b.HasOne("game_server.Database.Models.GameInfo", "GameInfo")
                        .WithMany("GameSessions")
                        .HasForeignKey("GameInfoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("game_server.Database.Models.GameStatistic", "GameStatistic")
                        .WithOne("GameSession")
                        .HasForeignKey("game_server.Database.Models.GameSession", "GameStatisticId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("game_server.Database.Models.GameStatistic", b =>
                {
                    b.HasOne("game_server.Database.Models.GameInfo", "GameInfo")
                        .WithMany("GameStatistics")
                        .HasForeignKey("GameInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("game_server.Database.Models.User", "User")
                        .WithMany("GameStatistics")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("game_server.Database.Models.UserStatistic", "UserStatistic")
                        .WithMany("GameStatistics")
                        .HasForeignKey("UserStatisticId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("game_server.Database.Models.Rule", b =>
                {
                    b.HasOne("game_server.Database.Models.GameInfo", "GameInfo")
                        .WithMany("Rules")
                        .HasForeignKey("GameInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("game_server.Database.Models.User", "User")
                        .WithMany("Rules")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("game_server.Database.Models.UserGameSession", b =>
                {
                    b.HasOne("game_server.Database.Models.GameInfo", "GameInfo")
                        .WithMany("UserGameSessions")
                        .HasForeignKey("GameInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("game_server.Database.Models.GameSession", "GameSession")
                        .WithMany("UserGameSessions")
                        .HasForeignKey("GameSessionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("game_server.Database.Models.GameStatistic", "GameStatistic")
                        .WithMany("UserGameSessions")
                        .HasForeignKey("GameStatisticId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("game_server.Database.Models.User", "User")
                        .WithMany("UserGameSessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("game_server.Database.Models.UserStatistic", b =>
                {
                    b.HasOne("game_server.Database.Models.GameInfo", "GameInfo")
                        .WithMany("UserStatistics")
                        .HasForeignKey("GameInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("game_server.Database.Models.User", "User")
                        .WithMany("UserStatistics")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
